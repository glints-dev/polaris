import os from 'os';
import postcss from 'postcss';
import stylelint from 'stylelint';

const crossPlatformNewlineRegExp = /\r\n?|\n/;
const polarisContextMsg = '-- generated by polaris-migrator DO NOT COPY';

const plugin = () => {
  return {
    postcssPlugin: 'insert-stylelint-disable',

    Once(root, {
      result
    }) {
      result.messages.forEach(({
        node
      }) => {
        var _node$prev, _node$prev$text;

        // If a polaris ignore comment exists above the node already,
        // do nothing
        if ((_node$prev = node.prev()) !== null && _node$prev !== void 0 && (_node$prev$text = _node$prev.text) !== null && _node$prev$text !== void 0 && _node$prev$text.includes(polarisContextMsg)) {
          return;
        }

        const isMultiline = crossPlatformNewlineRegExp.test(node.value) || crossPlatformNewlineRegExp.test(node.text) || crossPlatformNewlineRegExp.test(node.params);
        const commentText = `${isMultiline ? 'stylelint-disable' : 'stylelint-disable-next-line'} ${polarisContextMsg}`;
        const comment = createDisableComment(commentText, node.prev());
        node.before(comment);

        if (isMultiline) {
          var _node$nodes;

          node.type === 'atrule' && node !== null && node !== void 0 && (_node$nodes = node.nodes) !== null && _node$nodes !== void 0 && _node$nodes.length || node.type === 'rule' ? node.prepend(createCommentNode('stylelint-enable')) : node.after(createCommentNode('stylelint-enable'));
        }

        deleteExtraNewlinesBeforeNode(node);
      });
      fillDescriptionlessDisables(result, root);
    }

  };
};

async function stylesInsertStylelintDisable(file, _, options) {
  var _options$config;

  return postcss([stylelint({
    config: {
      extends: [(_options$config = options.config) !== null && _options$config !== void 0 ? _options$config : '@shopify/stylelint-polaris']
    }
  }), plugin()]).process(file.source, {
    from: file.path,
    syntax: require('postcss-scss')
  }).then(result => {
    return result.css;
  });
}
/**
 * Create a postcss comment node in the style:
 * `// ${text}`
 */

function createCommentNode(text) {
  return new postcss.Comment({
    text,
    raws: {
      left: ' ',
      right: '',
      inline: true
    }
  });
}
/**
 * Create a new disable comment with the given text.
 * If the prevNode and the text are both disable-next-line
 * comments, they are combined into a single comment with their
 * description texts seperated by a comma.
 */


function createDisableComment(text, prevNode) {
  var _prevNode$text, _prevNode$text$split, _prevNode$text$split$;

  if ((prevNode === null || prevNode === void 0 ? void 0 : prevNode.type) !== 'comment' || !prevNode.text.includes('stylelint-disable-next-line') || !text.includes('stylelint-disable-next-line')) {
    return createCommentNode(text);
  }

  const prevDescription = (_prevNode$text = prevNode.text) === null || _prevNode$text === void 0 ? void 0 : (_prevNode$text$split = _prevNode$text.split('--')) === null || _prevNode$text$split === void 0 ? void 0 : (_prevNode$text$split$ = _prevNode$text$split[1]) === null || _prevNode$text$split$ === void 0 ? void 0 : _prevNode$text$split$.trim();
  const commentText = prevDescription !== null && prevDescription !== void 0 && prevDescription.length ? [text, prevDescription].join(', ') : text;
  prevNode.remove();
  return createCommentNode(commentText);
}
/**
 * Reduces the number of newline characters in a node's before
 * raws to just one. This is helpful to ensure that there is
 * only one newline between a disable-next-line comment and
 * the warning node.
 */


function deleteExtraNewlinesBeforeNode(node) {
  node.raws.before = `${os.EOL}${node.raws.before.replace(new RegExp(crossPlatformNewlineRegExp, 'g'), '')}`;
}
/**
 * If report-descriptionless-disables is enabled on stylelint,
 * add a generated description to disables that don't have one.
 */


function fillDescriptionlessDisables(result, root) {
  var _stylelintResult$conf;

  const stylelintResult = result === null || result === void 0 ? void 0 : result.stylelint;

  if (stylelintResult !== null && stylelintResult !== void 0 && (_stylelintResult$conf = stylelintResult.config) !== null && _stylelintResult$conf !== void 0 && _stylelintResult$conf.reportDescriptionlessDisables) {
    root.walkComments(comment => {
      if (comment.text.includes('stylelint-disable') && !comment.text.includes('--')) {
        comment.before(createCommentNode([comment.text, polarisContextMsg].join(' ')));
        comment.remove();
      }
    });
  }
}

export { stylesInsertStylelintDisable as default };
